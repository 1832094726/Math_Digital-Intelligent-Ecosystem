---
globs: docker-compose.yml,Dockerfile,*.config.js,requirements.txt,package.json
description: 部署和运维相关规则
---

# 部署和运维规则

## 项目部署结构

### 前端部署
- **作业系统**: [homework_system/](mdc:homework_system/)
  - 构建配置: [homework_system/vue.config.js](mdc:homework_system/vue.config.js)
  - 依赖管理: [homework_system/package.json](mdc:homework_system/package.json)
  - Babel配置: [homework_system/babel.config.js](mdc:homework_system/babel.config.js)
  - 构建输出: [homework_system/dist/](mdc:homework_system/dist/)

### 后端部署
- **主后端服务**: [homework-backend/](mdc:homework-backend/)
  - 应用入口: [homework-backend/app.py](mdc:homework-backend/app.py)
  - 依赖管理: [homework-backend/requirements.txt](mdc:homework-backend/requirements.txt)
  - API测试: [homework-backend/test_api.py](mdc:homework-backend/test_api.py)

- **符号推荐服务**: [Subject_symbol_dynamic_keyboard/board-backend/](mdc:Subject_symbol_dynamic_keyboard/board-backend/)
  - 应用入口: [Subject_symbol_dynamic_keyboard/board-backend/app.py](mdc:Subject_symbol_dynamic_keyboard/board-backend/app.py)
  - 预测服务: [Subject_symbol_dynamic_keyboard/board-backend/predict.py](mdc:Subject_symbol_dynamic_keyboard/board-backend/predict.py)

## 环境配置

### 开发环境
```bash
# 前端开发环境
cd homework_system
npm install
npm run serve

# 后端开发环境
cd homework-backend
pip install -r requirements.txt
python app.py

# 符号推荐服务
cd Subject_symbol_dynamic_keyboard/board-backend
pip install -r requirements.txt
python app.py
```

### 生产环境
```bash
# 前端生产构建
cd homework_system
npm run build

# 后端生产部署
cd homework-backend
gunicorn -w 4 -b 0.0.0.0:5000 app:app

# 使用Docker部署
docker-compose up -d
```

## Docker化部署

### Docker Compose配置
```yaml
version: '3.8'
services:
  frontend:
    build: 
      context: ./homework_system
      dockerfile: Dockerfile
    ports:
      - "80:80"
    depends_on:
      - backend
      - symbol-service

  backend:
    build:
      context: ./homework-backend
      dockerfile: Dockerfile
    ports:
      - "5000:5000"
    environment:
      - FLASK_ENV=production
      - DATABASE_URL=sqlite:///homework.db
    volumes:
      - ./homework-backend/data:/app/data

  symbol-service:
    build:
      context: ./Subject_symbol_dynamic_keyboard/board-backend
      dockerfile: Dockerfile
    ports:
      - "5001:5000"
    volumes:
      - ./Subject_symbol_dynamic_keyboard/board-backend/data:/app/data

  redis:
    image: redis:6-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data

volumes:
  redis_data:
```

### Dockerfile示例
```dockerfile
# 前端Dockerfile
FROM node:14-alpine AS build
WORKDIR /app
COPY package*.json ./
RUN npm install
COPY . .
RUN npm run build

FROM nginx:alpine
COPY --from=build /app/dist /usr/share/nginx/html
COPY nginx.conf /etc/nginx/nginx.conf

# 后端Dockerfile
FROM python:3.8-slim
WORKDIR /app
COPY requirements.txt .
RUN pip install -r requirements.txt
COPY . .
EXPOSE 5000
CMD ["gunicorn", "-w", "4", "-b", "0.0.0.0:5000", "app:app"]
```

## 监控和日志

### 应用监控
- **性能指标**: 响应时间、吞吐量、错误率
- **业务指标**: 推荐准确率、用户活跃度、学习效果
- **系统指标**: CPU、内存、磁盘、网络使用率

### 日志管理
```python
import logging
from logging.handlers import RotatingFileHandler

# 日志配置
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s %(levelname)s %(name)s: %(message)s',
    handlers=[
        RotatingFileHandler('logs/app.log', maxBytes=10485760, backupCount=10),
        logging.StreamHandler()
    ]
)

# 推荐系统专用日志
recommendation_logger = logging.getLogger('recommendation')
recommendation_logger.info('推荐请求处理完成')
```

### 健康检查
```python
# Flask健康检查端点
@app.route('/health')
def health_check():
    return {
        'status': 'healthy',
        'timestamp': datetime.utcnow().isoformat(),
        'version': '1.0.0',
        'services': {
            'database': check_database_connection(),
            'redis': check_redis_connection(),
            'ai_model': check_model_availability()
        }
    }
```

## 数据备份策略

### 数据文件备份
```bash
#!/bin/bash
# 数据备份脚本
BACKUP_DIR="/backup/$(date +%Y%m%d_%H%M%S)"
mkdir -p $BACKUP_DIR

# 备份JSON数据文件
cp -r homework-backend/data/*.json $BACKUP_DIR/
cp -r homework-backend/data/*.xlsx $BACKUP_DIR/

# 备份用户上传文件
cp -r uploads/ $BACKUP_DIR/

# 创建压缩包
tar -czf $BACKUP_DIR.tar.gz $BACKUP_DIR
rm -rf $BACKUP_DIR

echo "备份完成: $BACKUP_DIR.tar.gz"
```

### 数据库备份
```python
import sqlite3
import shutil
from datetime import datetime

def backup_database():
    """备份SQLite数据库"""
    timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
    backup_path = f"backups/homework_{timestamp}.db"
    
    shutil.copy2('data/homework.db', backup_path)
    print(f"数据库备份完成: {backup_path}")
```

## 性能优化

### 前端优化
- **代码分割**: 使用Vue Router懒加载
- **资源压缩**: 启用Gzip压缩
- **缓存策略**: 设置合适的HTTP缓存头
- **CDN加速**: 静态资源使用CDN

### 后端优化
- **数据库优化**: 添加索引，优化查询
- **缓存策略**: 使用Redis缓存热点数据
- **异步处理**: 使用Celery处理耗时任务
- **负载均衡**: 使用Nginx进行负载均衡

```nginx
# Nginx配置示例
upstream backend {
    server 127.0.0.1:5000;
    server 127.0.0.1:5001;
}

server {
    listen 80;
    server_name mathlearn.example.com;

    location / {
        root /var/www/homework_system/dist;
        try_files $uri $uri/ /index.html;
    }

    location /api/ {
        proxy_pass http://backend;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
    }

    # 静态资源缓存
    location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg)$ {
        expires 1y;
        add_header Cache-Control "public, immutable";
    }
}
```

## 安全配置

### HTTPS配置
```nginx
server {
    listen 443 ssl http2;
    ssl_certificate /path/to/certificate.crt;
    ssl_certificate_key /path/to/private.key;
    
    # SSL安全配置
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512;
    ssl_session_cache shared:SSL:10m;
}
```

### 环境变量管理
```python
import os
from dotenv import load_dotenv

load_dotenv()

class Config:
    SECRET_KEY = os.environ.get('SECRET_KEY') or 'dev-secret-key'
    DATABASE_URL = os.environ.get('DATABASE_URL') or 'sqlite:///homework.db'
    REDIS_URL = os.environ.get('REDIS_URL') or 'redis://localhost:6379'
    JWT_SECRET = os.environ.get('JWT_SECRET') or 'jwt-secret'
```

## 持续集成/持续部署（CI/CD）

### GitHub Actions配置
```yaml
name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    
    - name: Setup Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '14'
    
    - name: Install frontend dependencies
      run: |
        cd homework_system
        npm install
    
    - name: Run frontend tests
      run: |
        cd homework_system
        npm run test
    
    - name: Setup Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.8'
    
    - name: Install backend dependencies
      run: |
        cd homework-backend
        pip install -r requirements.txt
    
    - name: Run backend tests
      run: |
        cd homework-backend
        python -m pytest

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Deploy to production
      run: |
        # 部署脚本
        echo "部署到生产环境"
```