{"ast":null,"code":"import _toConsumableArray from \"E:/program development/The Digital and Intelligent Ecosystem for K-12 Mathematics Education/homework_system/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.array.sort.js\";\nimport \"core-js/modules/es.date.to-string.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/web.timers.js\";\nimport { formatDate as _formatDate } from '../utils/dateFormat';\nexport default {\n  name: 'HomeworkManagement',\n  props: {\n    // 作业列表\n    homeworks: {\n      type: Array,\n      required: true\n    },\n    // 当前激活的作业ID\n    activeHomeworkId: {\n      type: String,\n      \"default\": ''\n    }\n  },\n  data: function data() {\n    return {\n      // 加载状态\n      loading: false,\n      // 过滤器\n      statusFilter: 'all',\n      sortBy: 'deadline',\n      // 提醒设置\n      reminders: {\n        deadline: true,\n        deadlineTime: '12h',\n        daily: false,\n        dailyTime: '20:00'\n      }\n    };\n  },\n  computed: {\n    // 根据过滤条件筛选并排序作业\n    filteredHomeworks: function filteredHomeworks() {\n      // 先筛选\n      var result = _toConsumableArray(this.homeworks);\n      if (this.statusFilter !== 'all') {\n        if (this.statusFilter === 'incomplete') {\n          // 未完成包括未开始和进行中\n          result = result.filter(function (hw) {\n            return hw.status === 'not_started' || hw.status === 'in_progress';\n          });\n        } else if (this.statusFilter === 'submitted') {\n          // 已提交包括已提交和已批改\n          result = result.filter(function (hw) {\n            return hw.status === 'submitted' || hw.status === 'graded';\n          });\n        } else if (this.statusFilter === 'graded') {\n          // 只包括已批改\n          result = result.filter(function (hw) {\n            return hw.status === 'graded';\n          });\n        }\n      }\n\n      // 再排序\n      if (this.sortBy === 'deadline') {\n        // 按截止日期排序（从近到远）\n        result.sort(function (a, b) {\n          return new Date(a.deadline) - new Date(b.deadline);\n        });\n      } else if (this.sortBy === 'activity') {\n        // 按最近活动排序（从新到旧）\n        result.sort(function (a, b) {\n          return new Date(b.lastActivity) - new Date(a.lastActivity);\n        });\n      } else if (this.sortBy === 'difficulty') {\n        // 按难度排序（从低到高）\n        result.sort(function (a, b) {\n          return a.difficulty - b.difficulty;\n        });\n      }\n      return result;\n    }\n  },\n  methods: {\n    // 选择作业\n    selectHomework: function selectHomework(homeworkId) {\n      this.$emit('select-homework', homeworkId);\n    },\n    // 刷新作业列表\n    refreshHomeworks: function refreshHomeworks() {\n      var _this = this;\n      this.loading = true;\n      this.$emit('refresh-homeworks');\n\n      // 模拟加载结束\n      setTimeout(function () {\n        _this.loading = false;\n      }, 800);\n    },\n    // 应用过滤条件\n    applyFilters: function applyFilters() {\n      // 过滤和排序是通过计算属性实现的，这里不需要额外操作\n    },\n    // 计算作业完成进度\n    calculateProgress: function calculateProgress(homework) {\n      if (!homework.problems || homework.problems.length === 0) {\n        return 0;\n      }\n      if (homework.status === 'submitted' || homework.status === 'graded') {\n        return 100;\n      }\n\n      // 根据已回答的问题计算进度\n      var totalProblems = homework.problems.length;\n      var answeredProblems = homework.problems.filter(function (problem) {\n        return homework.savedAnswers && homework.savedAnswers[problem.id];\n      }).length;\n      return Math.round(answeredProblems / totalProblems * 100);\n    },\n    // 获取进度状态\n    getProgressStatus: function getProgressStatus(homework) {\n      var progress = this.calculateProgress(homework);\n      if (progress === 0) return 'exception';\n      if (progress < 100) return '';\n      return 'success';\n    },\n    // 获取状态标签类型\n    getStatusType: function getStatusType(status) {\n      var typeMap = {\n        'not_started': 'info',\n        'in_progress': 'warning',\n        'submitted': 'primary',\n        'graded': 'success'\n      };\n      return typeMap[status] || 'info';\n    },\n    // 获取状态文本\n    getStatusText: function getStatusText(status) {\n      var textMap = {\n        'not_started': '未开始',\n        'in_progress': '进行中',\n        'submitted': '已提交',\n        'graded': '已批改'\n      };\n      return textMap[status] || status;\n    },\n    // 获取难度文本\n    getDifficultyText: function getDifficultyText(difficulty) {\n      var difficultyMap = {\n        1: '简单',\n        2: '中等',\n        3: '困难',\n        4: '挑战',\n        5: '极难'\n      };\n      return difficultyMap[difficulty] || difficulty;\n    },\n    // 获取未完成作业数量\n    getIncompleteCount: function getIncompleteCount() {\n      return this.homeworks.filter(function (hw) {\n        return hw.status === 'not_started' || hw.status === 'in_progress';\n      }).length;\n    },\n    // 获取已提交作业数量\n    getSubmittedCount: function getSubmittedCount() {\n      return this.homeworks.filter(function (hw) {\n        return hw.status === 'submitted';\n      }).length;\n    },\n    // 获取已批改作业数量\n    getGradedCount: function getGradedCount() {\n      return this.homeworks.filter(function (hw) {\n        return hw.status === 'graded';\n      }).length;\n    },\n    // 获取空状态文本\n    getEmptyStateText: function getEmptyStateText() {\n      if (this.statusFilter === 'all') {\n        return '暂无作业';\n      } else if (this.statusFilter === 'incomplete') {\n        return '暂无未完成作业';\n      } else if (this.statusFilter === 'submitted') {\n        return '暂无已提交作业';\n      } else if (this.statusFilter === 'graded') {\n        return '暂无已批改作业';\n      }\n      return '暂无作业';\n    },\n    // 保存提醒设置\n    saveReminderSettings: function saveReminderSettings() {\n      // 实际应用中应该调用API保存设置\n      this.$message.success('提醒设置已保存');\n\n      // 如果启用了提醒，可以在本地设置提醒\n      if (this.reminders.deadline) {\n        // 设置截止日期提醒\n        console.log('设置截止日期提醒', this.reminders.deadlineTime);\n      }\n      if (this.reminders.daily) {\n        // 设置每日提醒\n        console.log('设置每日提醒', this.reminders.dailyTime);\n      }\n    },\n    // 格式化日期\n    formatDate: function formatDate(date) {\n      return _formatDate(date, 'MM-DD HH:mm');\n    }\n  }\n};","map":{"version":3,"names":["formatDate","name","props","homeworks","type","Array","required","activeHomeworkId","String","data","loading","statusFilter","sortBy","reminders","deadline","deadlineTime","daily","dailyTime","computed","filteredHomeworks","result","_toConsumableArray","filter","hw","status","sort","a","b","Date","lastActivity","difficulty","methods","selectHomework","homeworkId","$emit","refreshHomeworks","_this","setTimeout","applyFilters","calculateProgress","homework","problems","length","totalProblems","answeredProblems","problem","savedAnswers","id","Math","round","getProgressStatus","progress","getStatusType","typeMap","getStatusText","textMap","getDifficultyText","difficultyMap","getIncompleteCount","getSubmittedCount","getGradedCount","getEmptyStateText","saveReminderSettings","$message","success","console","log","date"],"sources":["E:\\program development\\The Digital and Intelligent Ecosystem for K-12 Mathematics Education\\homework_system\\src\\components\\HomeworkManagement.vue"],"sourcesContent":["<!--\r\n  文件名: HomeworkManagement.vue\r\n  描述: 作业管理模块组件，负责作业的接收、存储、状态跟踪和提交\r\n  作者: Claude\r\n  创建日期: 2025-06-15\r\n-->\r\n\r\n<template>\r\n  <div class=\"homework-management\">\r\n    <div class=\"header\">\r\n      <h3>我的作业</h3>\r\n      <el-button \r\n        type=\"text\" \r\n        icon=\"el-icon-refresh\" \r\n        @click=\"refreshHomeworks\"\r\n        :loading=\"loading\"\r\n      >刷新</el-button>\r\n    </div>\r\n    \r\n    <!-- 作业过滤器 -->\r\n    <div class=\"filter-container\">\r\n      <el-select v-model=\"statusFilter\" placeholder=\"状态\" size=\"small\" @change=\"applyFilters\">\r\n        <el-option label=\"全部\" value=\"all\"></el-option>\r\n        <el-option label=\"未完成\" value=\"incomplete\"></el-option>\r\n        <el-option label=\"已提交\" value=\"submitted\"></el-option>\r\n        <el-option label=\"已批改\" value=\"graded\"></el-option>\r\n      </el-select>\r\n      \r\n      <el-select v-model=\"sortBy\" placeholder=\"排序\" size=\"small\" @change=\"applyFilters\">\r\n        <el-option label=\"截止日期\" value=\"deadline\"></el-option>\r\n        <el-option label=\"最近活动\" value=\"activity\"></el-option>\r\n        <el-option label=\"难度\" value=\"difficulty\"></el-option>\r\n      </el-select>\r\n    </div>\r\n    \r\n    <!-- 作业列表 -->\r\n    <div class=\"homework-list\" v-loading=\"loading\">\r\n      <template v-if=\"filteredHomeworks.length > 0\">\r\n        <div \r\n          v-for=\"homework in filteredHomeworks\" \r\n          :key=\"homework.id\"\r\n          class=\"homework-item\"\r\n          :class=\"{ 'active': activeHomeworkId === homework.id }\"\r\n          @click=\"selectHomework(homework.id)\"\r\n        >\r\n          <div class=\"homework-status\">\r\n            <el-tag :type=\"getStatusType(homework.status)\" size=\"mini\">\r\n              {{ getStatusText(homework.status) }}\r\n            </el-tag>\r\n          </div>\r\n          <div class=\"homework-info\">\r\n            <h4 class=\"homework-title\">{{ homework.title }}</h4>\r\n            <div class=\"homework-meta\">\r\n              <span><i class=\"el-icon-date\"></i> {{ formatDate(homework.deadline) }}</span>\r\n              <span><i class=\"el-icon-medal\"></i> {{ getDifficultyText(homework.difficulty) }}</span>\r\n            </div>\r\n          </div>\r\n          <div class=\"homework-progress\">\r\n            <el-progress \r\n              type=\"circle\" \r\n              :percentage=\"calculateProgress(homework)\" \r\n              :width=\"36\"\r\n              :status=\"getProgressStatus(homework)\"\r\n            ></el-progress>\r\n          </div>\r\n        </div>\r\n      </template>\r\n      \r\n      <div v-else-if=\"!loading\" class=\"empty-state\">\r\n        <i class=\"el-icon-document\"></i>\r\n        <p>{{ getEmptyStateText() }}</p>\r\n      </div>\r\n    </div>\r\n    \r\n    <!-- 作业统计 -->\r\n    <div class=\"homework-stats\">\r\n      <div class=\"stat-item\">\r\n        <span class=\"stat-label\">待完成</span>\r\n        <span class=\"stat-value\">{{ getIncompleteCount() }}</span>\r\n      </div>\r\n      <div class=\"stat-item\">\r\n        <span class=\"stat-label\">已提交</span>\r\n        <span class=\"stat-value\">{{ getSubmittedCount() }}</span>\r\n      </div>\r\n      <div class=\"stat-item\">\r\n        <span class=\"stat-label\">已批改</span>\r\n        <span class=\"stat-value\">{{ getGradedCount() }}</span>\r\n      </div>\r\n    </div>\r\n    \r\n    <!-- 提醒设置 -->\r\n    <div class=\"reminder-settings\">\r\n      <el-collapse>\r\n        <el-collapse-item title=\"提醒设置\" name=\"reminders\">\r\n          <div class=\"reminder-options\">\r\n            <el-checkbox v-model=\"reminders.deadline\">截止前提醒</el-checkbox>\r\n            <el-select \r\n              v-model=\"reminders.deadlineTime\" \r\n              placeholder=\"提前时间\" \r\n              size=\"small\"\r\n              :disabled=\"!reminders.deadline\"\r\n            >\r\n              <el-option label=\"1小时\" value=\"1h\"></el-option>\r\n              <el-option label=\"3小时\" value=\"3h\"></el-option>\r\n              <el-option label=\"6小时\" value=\"6h\"></el-option>\r\n              <el-option label=\"12小时\" value=\"12h\"></el-option>\r\n              <el-option label=\"1天\" value=\"1d\"></el-option>\r\n            </el-select>\r\n          </div>\r\n          <div class=\"reminder-options\">\r\n            <el-checkbox v-model=\"reminders.daily\">每日提醒</el-checkbox>\r\n            <el-time-picker\r\n              v-model=\"reminders.dailyTime\"\r\n              placeholder=\"提醒时间\"\r\n              size=\"small\"\r\n              :disabled=\"!reminders.daily\"\r\n              format=\"HH:mm\"\r\n              value-format=\"HH:mm\"\r\n            ></el-time-picker>\r\n          </div>\r\n          <el-button \r\n            type=\"primary\" \r\n            size=\"small\" \r\n            @click=\"saveReminderSettings\"\r\n            style=\"margin-top: 10px\"\r\n          >保存设置</el-button>\r\n        </el-collapse-item>\r\n      </el-collapse>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { formatDate } from '../utils/dateFormat';\r\n\r\nexport default {\r\n  name: 'HomeworkManagement',\r\n  \r\n  props: {\r\n    // 作业列表\r\n    homeworks: {\r\n      type: Array,\r\n      required: true\r\n    },\r\n    \r\n    // 当前激活的作业ID\r\n    activeHomeworkId: {\r\n      type: String,\r\n      default: ''\r\n    }\r\n  },\r\n  \r\n  data() {\r\n    return {\r\n      // 加载状态\r\n      loading: false,\r\n      \r\n      // 过滤器\r\n      statusFilter: 'all',\r\n      sortBy: 'deadline',\r\n      \r\n      // 提醒设置\r\n      reminders: {\r\n        deadline: true,\r\n        deadlineTime: '12h',\r\n        daily: false,\r\n        dailyTime: '20:00'\r\n      }\r\n    };\r\n  },\r\n  \r\n  computed: {\r\n    // 根据过滤条件筛选并排序作业\r\n    filteredHomeworks() {\r\n      // 先筛选\r\n      let result = [...this.homeworks];\r\n      \r\n      if (this.statusFilter !== 'all') {\r\n        if (this.statusFilter === 'incomplete') {\r\n          // 未完成包括未开始和进行中\r\n          result = result.filter(hw => \r\n            hw.status === 'not_started' || hw.status === 'in_progress'\r\n          );\r\n        } else if (this.statusFilter === 'submitted') {\r\n          // 已提交包括已提交和已批改\r\n          result = result.filter(hw => \r\n            hw.status === 'submitted' || hw.status === 'graded'\r\n          );\r\n        } else if (this.statusFilter === 'graded') {\r\n          // 只包括已批改\r\n          result = result.filter(hw => hw.status === 'graded');\r\n        }\r\n      }\r\n      \r\n      // 再排序\r\n      if (this.sortBy === 'deadline') {\r\n        // 按截止日期排序（从近到远）\r\n        result.sort((a, b) => new Date(a.deadline) - new Date(b.deadline));\r\n      } else if (this.sortBy === 'activity') {\r\n        // 按最近活动排序（从新到旧）\r\n        result.sort((a, b) => new Date(b.lastActivity) - new Date(a.lastActivity));\r\n      } else if (this.sortBy === 'difficulty') {\r\n        // 按难度排序（从低到高）\r\n        result.sort((a, b) => a.difficulty - b.difficulty);\r\n      }\r\n      \r\n      return result;\r\n    }\r\n  },\r\n  \r\n  methods: {\r\n    // 选择作业\r\n    selectHomework(homeworkId) {\r\n      this.$emit('select-homework', homeworkId);\r\n    },\r\n    \r\n    // 刷新作业列表\r\n    refreshHomeworks() {\r\n      this.loading = true;\r\n      this.$emit('refresh-homeworks');\r\n      \r\n      // 模拟加载结束\r\n      setTimeout(() => {\r\n        this.loading = false;\r\n      }, 800);\r\n    },\r\n    \r\n    // 应用过滤条件\r\n    applyFilters() {\r\n      // 过滤和排序是通过计算属性实现的，这里不需要额外操作\r\n    },\r\n    \r\n    // 计算作业完成进度\r\n    calculateProgress(homework) {\r\n      if (!homework.problems || homework.problems.length === 0) {\r\n        return 0;\r\n      }\r\n      \r\n      if (homework.status === 'submitted' || homework.status === 'graded') {\r\n        return 100;\r\n      }\r\n      \r\n      // 根据已回答的问题计算进度\r\n      const totalProblems = homework.problems.length;\r\n      const answeredProblems = homework.problems.filter(\r\n        problem => homework.savedAnswers && homework.savedAnswers[problem.id]\r\n      ).length;\r\n      \r\n      return Math.round((answeredProblems / totalProblems) * 100);\r\n    },\r\n    \r\n    // 获取进度状态\r\n    getProgressStatus(homework) {\r\n      const progress = this.calculateProgress(homework);\r\n      \r\n      if (progress === 0) return 'exception';\r\n      if (progress < 100) return '';\r\n      return 'success';\r\n    },\r\n    \r\n    // 获取状态标签类型\r\n    getStatusType(status) {\r\n      const typeMap = {\r\n        'not_started': 'info',\r\n        'in_progress': 'warning',\r\n        'submitted': 'primary',\r\n        'graded': 'success'\r\n      };\r\n      return typeMap[status] || 'info';\r\n    },\r\n    \r\n    // 获取状态文本\r\n    getStatusText(status) {\r\n      const textMap = {\r\n        'not_started': '未开始',\r\n        'in_progress': '进行中',\r\n        'submitted': '已提交',\r\n        'graded': '已批改'\r\n      };\r\n      return textMap[status] || status;\r\n    },\r\n    \r\n    // 获取难度文本\r\n    getDifficultyText(difficulty) {\r\n      const difficultyMap = {\r\n        1: '简单',\r\n        2: '中等',\r\n        3: '困难',\r\n        4: '挑战',\r\n        5: '极难'\r\n      };\r\n      return difficultyMap[difficulty] || difficulty;\r\n    },\r\n    \r\n    // 获取未完成作业数量\r\n    getIncompleteCount() {\r\n      return this.homeworks.filter(\r\n        hw => hw.status === 'not_started' || hw.status === 'in_progress'\r\n      ).length;\r\n    },\r\n    \r\n    // 获取已提交作业数量\r\n    getSubmittedCount() {\r\n      return this.homeworks.filter(\r\n        hw => hw.status === 'submitted'\r\n      ).length;\r\n    },\r\n    \r\n    // 获取已批改作业数量\r\n    getGradedCount() {\r\n      return this.homeworks.filter(\r\n        hw => hw.status === 'graded'\r\n      ).length;\r\n    },\r\n    \r\n    // 获取空状态文本\r\n    getEmptyStateText() {\r\n      if (this.statusFilter === 'all') {\r\n        return '暂无作业';\r\n      } else if (this.statusFilter === 'incomplete') {\r\n        return '暂无未完成作业';\r\n      } else if (this.statusFilter === 'submitted') {\r\n        return '暂无已提交作业';\r\n      } else if (this.statusFilter === 'graded') {\r\n        return '暂无已批改作业';\r\n      }\r\n      return '暂无作业';\r\n    },\r\n    \r\n    // 保存提醒设置\r\n    saveReminderSettings() {\r\n      // 实际应用中应该调用API保存设置\r\n      this.$message.success('提醒设置已保存');\r\n      \r\n      // 如果启用了提醒，可以在本地设置提醒\r\n      if (this.reminders.deadline) {\r\n        // 设置截止日期提醒\r\n        console.log('设置截止日期提醒', this.reminders.deadlineTime);\r\n      }\r\n      \r\n      if (this.reminders.daily) {\r\n        // 设置每日提醒\r\n        console.log('设置每日提醒', this.reminders.dailyTime);\r\n      }\r\n    },\r\n    \r\n    // 格式化日期\r\n    formatDate(date) {\r\n      return formatDate(date, 'MM-DD HH:mm');\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.homework-management {\r\n  display: flex;\r\n  flex-direction: column;\r\n  height: 100%;\r\n  padding: 15px;\r\n}\r\n\r\n.header {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  margin-bottom: 15px;\r\n}\r\n\r\n.header h3 {\r\n  margin: 0;\r\n  font-size: 18px;\r\n  color: #303133;\r\n}\r\n\r\n.filter-container {\r\n  display: flex;\r\n  gap: 10px;\r\n  margin-bottom: 15px;\r\n}\r\n\r\n.homework-list {\r\n  flex: 1;\r\n  overflow-y: auto;\r\n  margin-bottom: 15px;\r\n}\r\n\r\n.homework-item {\r\n  display: flex;\r\n  padding: 12px;\r\n  margin-bottom: 10px;\r\n  background-color: #fff;\r\n  border-radius: 4px;\r\n  border-left: 3px solid #e6e6e6;\r\n  box-shadow: 0 2px 6px rgba(0, 0, 0, 0.05);\r\n  cursor: pointer;\r\n  transition: all 0.3s;\r\n}\r\n\r\n.homework-item:hover {\r\n  transform: translateY(-2px);\r\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.homework-item.active {\r\n  border-left-color: #409EFF;\r\n  background-color: #f0f9ff;\r\n}\r\n\r\n.homework-status {\r\n  width: 60px;\r\n  display: flex;\r\n  align-items: flex-start;\r\n  justify-content: center;\r\n}\r\n\r\n.homework-info {\r\n  flex: 1;\r\n  padding-right: 10px;\r\n}\r\n\r\n.homework-title {\r\n  margin: 0 0 5px 0;\r\n  font-size: 15px;\r\n  font-weight: 500;\r\n  color: #303133;\r\n  white-space: nowrap;\r\n  overflow: hidden;\r\n  text-overflow: ellipsis;\r\n}\r\n\r\n.homework-meta {\r\n  display: flex;\r\n  gap: 10px;\r\n  font-size: 12px;\r\n  color: #909399;\r\n}\r\n\r\n.homework-progress {\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  width: 40px;\r\n}\r\n\r\n.empty-state {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n  height: 150px;\r\n  color: #909399;\r\n}\r\n\r\n.empty-state i {\r\n  font-size: 36px;\r\n  margin-bottom: 10px;\r\n}\r\n\r\n.homework-stats {\r\n  display: flex;\r\n  border-top: 1px solid #e6e6e6;\r\n  border-bottom: 1px solid #e6e6e6;\r\n  padding: 10px 0;\r\n  margin-bottom: 15px;\r\n}\r\n\r\n.stat-item {\r\n  flex: 1;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n}\r\n\r\n.stat-label {\r\n  font-size: 12px;\r\n  color: #909399;\r\n  margin-bottom: 5px;\r\n}\r\n\r\n.stat-value {\r\n  font-size: 18px;\r\n  font-weight: bold;\r\n  color: #303133;\r\n}\r\n\r\n.reminder-settings {\r\n  margin-top: auto;\r\n}\r\n\r\n.reminder-options {\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  margin-bottom: 10px;\r\n}\r\n</style>\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}